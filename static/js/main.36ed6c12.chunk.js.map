{"version":3,"sources":["components/Container/Container.module.css","components/Container/Container.js","components/Form/Form.js","components/Contacts/Contacts.js","components/Filter/Filter.js","App.js","index.js","components/Form/Form.module.css","components/Contacts/Contacts.module.css"],"names":["module","exports","Container","children","className","styles","Form","onSubmit","useState","name","setName","number","setNumber","handleChange","event","target","value","reset","nameInputId","shortid","generate","numberInputId","e","preventDefault","style","form","htmlFor","onChange","id","type","pattern","title","required","button","Contacts","contacts","onDeleteContacts","map","item","onClick","Filter","App","setContacts","filter","setFilter","useEffect","localStorage","getItem","JSON","parse","prevState","setItem","stringify","visibleContacts","contact","toLowerCase","includes","data","find","alert","evt","deletedContactId","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.36ed6c12.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"Container_Container__3-3cc\"};","  \r\nimport PropTypes from 'prop-types';\r\nimport styles from './Container.module.css';\r\n\r\nconst Container = ({ children }) => (\r\n  <div className={styles.Container}>{children}</div>\r\n);\r\n\r\nContainer.propTypes = {\r\n  children: PropTypes.array.isRequired,\r\n};\r\n\r\nexport default Container;","import { useState } from 'react';\r\nimport style from './Form.module.css';\r\nimport shortid from 'shortid';\r\n\r\nexport default function Form({onSubmit}) {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n\r\n  const handleChange = event => {\r\n    const { name, value } = event.target;\r\n\r\n    switch (name) {\r\n      case 'name':\r\n        setName(value);\r\n        break;\r\n      \r\n      case 'number':\r\n        setNumber(value);\r\n        break;\r\n\r\n      default:\r\n        return;\r\n    }\r\n  }\r\n\r\n  const handleSubmit = e => {\r\n        e.preventDefault();\r\n        onSubmit({name,number});\r\n        reset();\r\n  };\r\n  \r\n  const reset = () => {\r\n    setName('');\r\n    setNumber('');\r\n  };\r\n\r\n const nameInputId = shortid.generate();\r\n  const numberInputId = shortid.generate();\r\n  \r\n  return (\r\n    <form onSubmit={handleSubmit} className={style.form}>\r\n          <label htmlFor={nameInputId}>\r\n            <p>Name</p>\r\n        <input\r\n          value={name}\r\n                        onChange={handleChange}\r\n                        id={nameInputId}\r\n  type=\"text\"\r\n  name=\"name\"\r\n  pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n  title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n  required\r\n        />\r\n          </label>\r\n\r\n          <label htmlFor={numberInputId}>\r\n            \r\n        <p>Number</p>\r\n        \r\n            <input\r\n              value={number}\r\n                        onChange={handleChange}\r\n                        id={numberInputId}\r\n  type=\"tel\"\r\n  name=\"number\"\r\n  pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n  title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n  required\r\n/>\r\n          </label>\r\n\r\n           <button type=\"submit\" className={style.button}>Add contact</button>\r\n        </form>\r\n  )\r\n}\r\n\r\n\r\n// class OldForm extends Component {\r\n//     state = {\r\n//         name: '',\r\n//     number: ''\r\n//     }\r\n\r\n//     nameInputId = shortid.generate();\r\n//     numberInputId = shortid.generate();\r\n\r\n//      handleChange = event => {\r\n//     const { name, value } = event.currentTarget;\r\n\r\n//     this.setState({\r\n//       [name]: value,\r\n//     });\r\n//   };\r\n\r\n//     handleSubmit = e => {\r\n//         e.preventDefault();\r\n//         this.props.onSubmit(this.state);\r\n//         this.reset();\r\n//     };\r\n\r\n//     reset = () => {\r\n//         this.setState({\r\n//             name: '',\r\n//             number: ''\r\n//         })\r\n//     };\r\n\r\n//     render() {\r\n//         return (\r\n//             <form onSubmit={this.handleSubmit} className={style.form}>\r\n//           <label htmlFor={this.nameInputId}>\r\n//             <p>Name</p>\r\n//         <input\r\n//           value={this.state.name}\r\n//                         onChange={this.handleChange}\r\n//                         id={this.nameInputId}\r\n//   type=\"text\"\r\n//   name=\"name\"\r\n//   pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n//   title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n//   required\r\n//         />\r\n//           </label>\r\n\r\n//           <label htmlFor={this.numberInputId}>\r\n            \r\n//         <p>Number</p>\r\n        \r\n//             <input\r\n//               value={this.state.number}\r\n//                         onChange={this.handleChange}\r\n//                         id={this.numberInputId}\r\n//   type=\"tel\"\r\n//   name=\"number\"\r\n//   pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n//   title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n//   required\r\n// />\r\n//           </label>\r\n\r\n//            <button type=\"submit\" className={style.button}>Add contact</button>\r\n//         </form>\r\n//         );\r\n//     }\r\n// }\r\n\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport style from './Contacts.module.css';\r\n\r\nconst Contacts = ({ contacts , onDeleteContacts}) => (\r\n    <ul>\r\n        {contacts.map(({ id, name, number }) => (\r\n            <li key={id} className={style.item}>\r\n                <p>{name}</p>\r\n                <span>{number}</span>\r\n                <button type=\"button\" onClick={()=>onDeleteContacts(id)} className={style.button}>Delete</button>\r\n            </li>\r\n        ))}\r\n        \r\n    </ul>\r\n);\r\n\r\n\r\nContacts.propTypes = {\r\n  contacts: PropTypes.arrayOf(PropTypes.objectOf(PropTypes.string.isRequired)),\r\n  onDeleteContacts: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Contacts;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n// import style from './Filter.module.css';\r\n\r\nconst Filter = ({ value, onChange }) => (\r\n    <label>\r\n        <p>Find contacts by name</p>\r\n        <input type=\"text\" value={value} onChange={onChange} />\r\n    </label>\r\n);\r\n\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Filter;","import { useState,useEffect } from \"react\";\n\nimport Container from \"./components/Container\";\nimport Form from \"./components/Form\";\nimport Contacts from \"./components/Contacts\"\nimport Filter from \"./components/Filter\";\n\n\nexport default function App() {\n  const [contacts, setContacts] = useState([\n    { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n    { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n    { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n    { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n  ]);\n  const [filter, setFilter] = useState('');\n\n  useEffect(() => {\n    if (localStorage.getItem('contacts')) {\n      setContacts(JSON.parse(localStorage.getItem('contacts')));\n    }\n  }, []);\n\n    useEffect(\n    prevState => {\n      if (contacts !== prevState) {\n        localStorage.setItem('contacts', JSON.stringify(contacts));\n      }\n    },\n    [contacts],\n    );\n  \n   const formSubmitHandler = data => {\n    if (contacts.find(contact => contact.name === data.name)) {\n      alert(`${data.name} is already in contacts`);\n      return;\n    }\n    setContacts(prevState => [data, ...prevState]);\n  };\n\n  const deleteContact = deletedContactId => {\n    setContacts(prevState =>\n      prevState.filter(contact => contact.id !== deletedContactId),\n    );\n  };\n\n  const changeFilter = evt => {\n    setFilter(evt.target.value);\n  };\n\n  const visibleContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filter.toLowerCase()),\n  );\n  \n\n  return (\n      <Container>\n        <h1>Phonebook</h1>\n        <Form onSubmit={ formSubmitHandler}/>\n       \n        <h2>Contacts</h2>\n        <Filter value={filter} onChange={ changeFilter}/>\n        \n        <Contacts contacts={visibleContacts} onDeleteContacts={ deleteContact}/>\n      </Container>\n      \n    )\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'modern-normalize/modern-normalize.css';\nimport App from './App';\nimport './style.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Form_form__1StNe\",\"button\":\"Form_button__PDaz5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Contacts_button__38Y0d\",\"item\":\"Contacts_item__245N0\"};"],"sourceRoot":""}